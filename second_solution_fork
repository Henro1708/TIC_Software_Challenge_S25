from TMMC_Wrapper import *
import rclpy
import numpy as np
import math
import time
from ultralytics import YOLO
from simple_pid import PID
# CONSTANTS ---------------------
DIST_SENSOR = 0.18
stopped_before = False
SIZE = 85
# Variable for controlling which level of the challenge to test -- set to 0 for pure keyboard control
challengeLevel = 3

# Set to True if you want to run the simulation, False if you want to run on the real robot
# is_SIM = False

# Set to True if you want to run in debug mode with extra print statements, False otherwise
# Debug = True

# Initialization    
if not "robot" in globals():
    robot = Robot(IS_SIM=False, DEBUG=False)
    
control = Control(robot)
camera = Camera(robot)
imu = IMU(robot)
logging = Logging(robot)
lidar = Lidar(robot)

def pid_wall_follow_control(left_distance, front_distance=None, setpoint=0.25, kp=0.2, ki=0, kd=0, base_speed=0.2, max_steering_angle=0.5):
    """
    Compute PID control output to maintain a set distance to the left wall using LiDAR data.
    
    Args:
        left_distance (float): Distance to left wall (meters).
        front_distance (float, optional): Distance to front obstacle (meters). If provided, scales speed.
        setpoint (float): Desired distance to left wall (meters, default 1.0).
        kp (float): Proportional gain for steering.
        ki (float): Integral gain for steering.
        kd (float): Derivative gain for steering.
        base_speed (float): Base linear velocity (m/s).
        max_steering_angle (float): Max steering angle in radians (e.g., 0.5 rad ~ 28.6 deg).
    
    Returns:
        tuple: (linear_velocity, steering_angle) in (m/s, radians).
    """
    # Initialize PID controller for steering angle
    pid = PID(kp, ki, kd, setpoint=setpoint)
    pid.output_limits = (-max_steering_angle, max_steering_angle)  # Limit steering angle
    
    # Calculate error (positive means too far from wall, negative means too close)
    error = left_distance - setpoint
    
    # Compute steering angle (positive = turn left, negative = turn right)
    steering_angle = pid(error)
    
    # Compute linear velocity
    linear_velocity = base_speed
    if front_distance is not None and 0.1 < front_distance < 10.0:
        # Scale speed based on front distance (stop if too close)
        if front_distance < 0.5:
            linear_velocity = 0.0
        elif front_distance < 1.5:
            linear_velocity *= front_distance / 1.5  # Reduce speed near obstacles
    if left_distance < 0.5:
        # Slow down if too close to left wall
        linear_velocity *= left_distance / 0.5
    
    return linear_velocity, float(steering_angle)


def stage_one_wall_avoidanc():
    print("Wall avoided")

    while rclpy.ok(): 
        rclpy.spin_once(robot, timeout_sec=0.1) 
        time.sleep(0.1) 
    #Write your solution here for challenge level # 1 
    # It is recommended you use functions for aspects of the challenge that will be resused in later c 
    # # For example, create funct Hetoo close to a wall ○ X 
    laserScan = lidar.checkScan() 
    closestobs = lidar.detect_obstacle_in_cone(laserScan,1.0,0,20) 
    # print(closestobs) 
    if (closestobs[0]<0.4 and closestobs[0]>0.0): 
        control.stop_keyboard_control() 
        # control.move_backward() 
        control.set_cmd_vel( 0.1, 0, 0.5) 
        control.set_cmd_vel( -0.5, 0, 1) 
        time. sleep (1)
        control.start_keyboard_input()
                                                                             

if challengeLevel <= 2:
    control.start_keyboard_control()
    rclpy.spin_once(robot, timeout_sec=0.1)


try:
    if challengeLevel == 0:
        while rclpy.ok():
            rclpy.spin_once(robot, timeout_sec=0.1)
            time.sleep(0.1)
            # Challenge 0 is pure keyboard control, you do not need to change this it is just for your own testing

    if challengeLevel == 1:
        THRESHOLD = 0.5  # Distance threshold in meters
        retreating = False  # State variable
        control.start_keyboard_input()
        
        while rclpy.ok():
            rclpy.spin_once(robot, timeout_sec=0.1)
            time.sleep(0.1)

            # Get the latest lidar scan
            laserScan = lidar.checkScan()
            
            # Detect the closest obstacle in a cone in front (center=0, ±30 degrees)
            closestObs = lidar.detect_obstacle_in_cone(laserScan, 100, 0, 30)
            
            # If an obstacle is detected and too close
            if closestObs[0] > 0.0 and closestObs[0] < THRESHOLD:
                if not retreating:
                    print("Obstacle too close, retreating")
                    control.stop_keyboard_input()  # Disable keyboard input
                    retreating = True
                control.send_cmd_vel(-0.3, 0.0)  # Move backward
            else:
                if retreating:
                    print("Safe, resuming keyboard control")
                    control.send_cmd_vel(0.0, 0.0)  # Stop the robot
                    control.start_keyboard_input()  # Re-enable keyboard input
                    retreating = False

                

    if challengeLevel == 2:
        while rclpy.ok():
            rclpy.spin_once(robot, timeout_sec=0.1)
            # time.sleep(0.1)
            # Write your solution here for challenge level 2
            cv2_img = camera.rosImg_to_cv2()
            is_stop_sign, x1, y1, x2, y2 = camera.ML_predict_stop_sign(cv2_img)
            stop_near = False   # This is used to check if the stop sign is close enough
            if (x2-x1 > SIZE and y2-y1 > SIZE):
                stop_near = True
                
            if stop_near:
                if not stopped_before:   # This is used to check if we stoped for this stop sign in the past
                    stopped_before = True
                    control.set_cmd_vel(0,0,5)
            else:
                stopped_before = False
                    

    if challengeLevel == 3:
        FIRST_TAG = 6
        SECOND_TAG = 7
        FOURTH_TAG = 5
        THIRD_TAG = 3
        known_tags = [FIRST_TAG, SECOND_TAG, THIRD_TAG, FOURTH_TAG]

        most_recent_tag = FIRST_TAG
        full_info_tag = (1000, 1000, 1000, 1000)
        did_i_stop = False
        angle_dict = {FIRST_TAG: 85, SECOND_TAG: 75, THIRD_TAG: 60, FOURTH_TAG: 120}
        distance_dict = {FIRST_TAG: 0.4, SECOND_TAG: 0.4, THIRD_TAG: 0.4, FOURTH_TAG: 0.5}

        while rclpy.ok():
            camera.checkImageRelease()
            rclpy.spin_once(robot, timeout_sec=0.1)
            time.sleep(0.1)
            # Write your solution here for challenge level 3 (or 3.5)
            # Get the latest lidar scan
            laserScan = lidar.checkScan()
            
            # Detect the closest obstacle in a cone in front (center=0, ±30 degrees)
            closestObs = lidar.detect_obstacle_in_cone(laserScan, 100, 0, 20)
            closest_to_right = lidar.detect_obstacle_in_cone(laserScan, 100, 90, 20) #not in use
            closest_to_left = lidar.detect_obstacle_in_cone(laserScan, 100, -90, 20)
            print(f'Distance to right wall is {closest_to_right}, Distance to left wall is {closest_to_left}')

            cv2_img = camera.rosImg_to_cv2()
            is_stop_sign, x1, y1, x2, y2 = camera.ML_predict_stop_sign(cv2_img)

            tags = camera.estimate_apriltag_pose(cv2_img)
            

            if tags:
                print(f'I FOUND A TAG! It is tag #{tags[0]}')
                for tag in tags:
                    if tag[1] < full_info_tag[1]:
                        full_info_tag = tag

                    most_recent_tag = full_info_tag[0]
                    print(f"tag id {tag[0]} distance {tag[1]} bearing {tag[2]} elevation {tag[3]}")

            

            if is_stop_sign and (x2-x1 > SIZE and y2-y1 > SIZE) and not did_i_stop:
                control.send_cmd_vel(0.0, 0.0)  # Stop the robot
                did_i_stop = True
                print("Stopping for traffic control")
                time.sleep(5.0)
            else:
                print(closestObs[0])
                if (closestObs[0] > distance_dict[most_recent_tag]):
                    # l_v, angle = pid_wall_follow_control(closest_to_left[0], closest_to_right[0])
                    control.send_cmd_vel(0.3, 0.0)
                    print('I am moving forward')

                else:
                    control.send_cmd_vel(0.0, 0.0)
                    if most_recent_tag is not None:
                        if most_recent_tag in known_tags:
                            print("I am rotating because I saw the tag.")
                            control.rotate(angle_dict[most_recent_tag], 1)
                            time.sleep(3)
                        else:
                            print("TAG NOT SEEN")
                            control.rotate(90, 1)
                    else:
                        print("I am rotating because im simply too close to the wall. ")
                        if closest_to_left[0] >= closest_to_right[0]:
                            control.rotate(2, 1)
                        else:
                            control.rotate(2, -1)


    if challengeLevel == 4:
        while rclpy.ok():
            rclpy.spin_once(robot, timeout_sec=0.1)
            time.sleep(0.1)
            # Write your solution here for challenge level 4



    if challengeLevel == 5:
        while rclpy.ok():
            rclpy.spin_once(robot, timeout_sec=0.1)
            time.sleep(0.1)
            # Write your solution here for challenge level 5
            
# stopping the keyboard controls immediately
except KeyboardInterrupt:
    print("Keyboard interrupt received. Stopping...")

finally:
    control.stop_keyboard_control()
    robot.destroy_node()
    if rclpy.ok():
        rclpy.shutdown()